name: Build and Release (on GitHub only)

on:
  # when a push is made to the main branch (like when a pull request is merged, or something is pushed directly)
  workflow_dispatch:
  push:
    branches: [ "main", "pr/adisidev/201" ]

env:
  BUILD_TYPE: Release

jobs:
  build-and-release:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
          fetch-depth: 0

    # - name: Cache APT packages
    #   uses: actions/cache@v3
    #   with:
    #     path: /var/cache/apt
    #     key: ${{ runner.os }}-apt-${{ hashFiles('apt-dependencies.txt') }}
    #     restore-keys: |
    #       ${{ runner.os }}-apt-

    - name: Install Dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential manpages-dev software-properties-common nlohmann-json3-dev libcgal-dev libomp-dev libfftw3-dev libcairo2-dev libboost-all-dev cmake
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt update && sudo apt install -y gcc-11 g++-11

    # - name: Save APT cache
    #   uses: actions/cache@v3
    #   with:
    #     path: /var/cache/apt
    #     key: ${{ runner.os }}-apt-${{ hashFiles('apt-dependencies.txt') }}

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: |
        cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target install -j$(nproc) --

    # - name: Run CTest
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

    # - name: Run Stress Test
    #   run: |
    #     sudo make install -C build
    #     cd tests/
    #     chmod +x stress_test.sh
    #     bash stress_test.sh

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: cartogram
        path: ./build/bin/cartogram

    -  name: Generate and Push Tag
       id: generate_tag
       run: |
         # Configure git committer
         git config --local user.email "action@github.com"
         git config --local user.name "GitHub Action"

         # Fetch tags
         git fetch --tags

         # Get the current date
         current_date=$(date +'%Y-%m-%d')

         # Get the short SHA of the current HEAD
         short_sha=$(git rev-parse --short HEAD)

         # Create the new tag
         git tag -a "${short_sha}" -m "New release on ${current_date}"

         # Push the tag to the repository
         git push origin "${short_sha}"

         echo "new_tag=${short_sha}" >> $GITHUB_OUTPUT
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.generate_tag.outputs.new_tag }}
        files: build/bin/cartogram
        body: "Rolling release ${{ steps.generate_tag.outputs.release_number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}