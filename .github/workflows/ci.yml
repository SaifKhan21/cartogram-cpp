name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            tool: gcc
            version: 13
            build_type: Release
            name: Release-gcc
          - os: ubuntu-latest
            tool: clang
            version: 16
            build_type: Release
            name: Release-clang
          - os: ubuntu-latest
            tool: gcc
            version: 13
            build_type: Debug
            name: Debug-gcc
          - os: ubuntu-latest
            tool: clang
            version: 16
            build_type: Debug
            name: Debug-clang
          # macOS
          - os: macos-14
            tool: apple-clang
            version: ""
            build_type: Release
            name: Release-mac
          - os: macos-14
            tool: apple-clang
            version: ""
            build_type: Debug
            name: Debug-mac

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python & Conan
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install -U pip wheel conan==2.16.1 cmake==3.30.0
          conan remote update conancenter --url=https://center2.conan.io
          conan profile detect

      - name: Install compiler (Linux only)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          if [[ "${{ matrix.tool }}" == "gcc" ]]; then
            sudo apt-get install -y gcc-${{ matrix.version }} g++-${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}"  >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} lld-${{ matrix.version }}
            echo "CC=clang-${{ matrix.version }}"   >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: Download Dependencies
        run: |
          source .venv/bin/activate
          conan install . \
            --output-folder build \
            --build=missing \
            -s build_type=${{ matrix.build_type }} \
            -s compiler.cppstd=20 \
            -o "*:shared=False"

      - name: CMake configure & build
        run: |
          source .venv/bin/activate
          cmake -S . -B build \
            -DCMAKE_TOOLCHAIN_FILE=build/build/${{ matrix.build_type }}/generators/conan_toolchain.cmake \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DBUILD_SHARED_LIBS=OFF \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cmake --build build -j$(nproc || sysctl -n hw.ncpu)

      - name: Package build folder
        run: tar -czf build-${{ matrix.name }}.tar.gz build

      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: build-${{ matrix.name }}.tar.gz

  # ─────────────────────────── Unit Tests ───────────────────────────
  unit-tests:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        target:
          - Release-gcc
          - Release-clang
          - Debug-gcc
          - Debug-clang
          - Release-mac
          - Debug-mac
    runs-on: "${{ contains(matrix.target, 'mac') && 'macos-14' || 'ubuntu-latest' }}"

    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.target }}

      - name: Unpack build folder
        run: tar -xzf build-${{ matrix.target }}.tar.gz

      - name: Unit tests
        run: |
          ctest --test-dir build -L unit --output-on-failure

  # ────────────────────────── Stress Tests ──────────────────────────
  stress-tests:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        target:
          - Release-gcc
          - Release-clang
          - Debug-gcc
          - Debug-clang
          - Release-mac
          - Debug-mac
    runs-on: "${{ contains(matrix.target, 'mac') && 'macos-14' || 'ubuntu-latest' }}"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.target }}

      - name: Unpack build folder
        run: tar -xzf build-${{ matrix.target }}.tar.gz

      - name: Stress tests
        run: |
          ctest --test-dir . -L stress --output-on-failure

  # ─────────────────────────── Fuzzer Tests ─────────────────────────
  fuzzer-tests:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        target:
          - Release-gcc
          - Release-clang
          - Release-mac
    runs-on: "${{ contains(matrix.target, 'mac') && 'macos-14' || 'ubuntu-latest' }}"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.target }}

      - name: Unpack build folder
        run: tar -xzf build-${{ matrix.target }}.tar.gz

      - name: Fuzzer tests
        run: |
          ctest --test-dir . -L fuzzer --verbose
